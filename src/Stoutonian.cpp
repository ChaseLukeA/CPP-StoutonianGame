// ---------------------------------------------------------------------------
//
//                   University of Wisconsin-Stout
//            Mathematics, Statistics & Computer Science
//                 CS-244 Data Structures - Fall 2016
//
// This software is student work for CSS-244 Data Structures and may not
// be copied except by the original author and instructor.
// Copyright 2016
//
// Stoutonian.cpp
//
// The Stoutonian class for creating a Stoutonian object; names are randomly-
// generated by the Names.h class
//
// Instructor: Jocelyn Richardt
// Assignment: StoutonianGame
// Author: Luke A Chase
// Date: 03/01/2017
//
// ---------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "Stoutonian.h"
#include "Names.h"

// default constructor creates a Stoutonian with a randomly-generated type, name, and stats
Stoutonian::Stoutonian()
{
    spawn(randomType());
}

// default constructor creates a Stoutonian with the specified StoutonianType and a randomly-generated name and stats
Stoutonian::Stoutonian(StoutonianType type)
{
    spawn(type);
}

// full constructor creates a Stoutonian with the provided type, name, and stats
Stoutonian::Stoutonian(StoutonianType type, string name, int sharpness, int strength, int speed)
: m_Type(type), m_Name(name), m_InitialMentalSharpness(sharpness), m_ChallengeStrength(strength), m_Speed(speed)
{
    m_ActualMentalSharpness = m_InitialMentalSharpness;
}


Stoutonian::~Stoutonian()
{
    //dtor
}

StoutonianType Stoutonian::randomType()
{
    return static_cast<StoutonianType>(rand() % 3);
}

// creates a Stoutonian from the specified type; name and speed are randomly generated
void Stoutonian::spawn(StoutonianType type)
{
    Names *names = Names::getInstance();

    m_Type = type;
    m_Name = names->randomName();

    switch (type)
    {
    case GameDesigner:
        m_InitialMentalSharpness = 30;
        m_ChallengeStrength = 20;
        m_Speed = (rand() % 10) + 10;
        break;
    case MathGenius:
        m_InitialMentalSharpness = 40;
        m_ChallengeStrength = 15;
        m_Speed = (rand() % 10) + 10;
        break;
    case InfoTechGuru:
        m_InitialMentalSharpness = 30;
        m_ChallengeStrength = 15;
        m_Speed = (rand() % 15) + 10;
        break;
    default: // in case we want the "Unknown" Stoutonian type
        m_InitialMentalSharpness = ((rand() % 4) + 1) * 10;
        m_ChallengeStrength = (rand() % 15) + 10;
        m_Speed = (rand() % 15) + 10;
    }

    m_ActualMentalSharpness = m_InitialMentalSharpness;
}

void Stoutonian::speak()
{
    switch (m_Type)
    {
    case GameDesigner:
        break;
    case MathGenius:
        break;
    case InfoTechGuru:
        break;
    default:
        break;
    }
    if (m_InitialMentalSharpness < 20)
    {
        cout << "I " << m_Name << "! Me " << m_InitialMentalSharpness << " smart and I challenge with " << m_ChallengeStrength << "% of the strengths!" << endl;
    }
    else if (m_InitialMentalSharpness < 35)
    {
        cout << "I am " << m_Name << "! I am quite smart with an IQ of " << m_InitialMentalSharpness << ". I can challenge with " << m_ChallengeStrength << "% of my strengths!" << endl;
    }
    else
    {
        cout << "Cower before the great " << m_Name << "! With my brilliant IQ of " << m_InitialMentalSharpness << ", I will crush you. I am " << m_ChallengeStrength << "% positive of this!" << endl;
    }
}

void Stoutonian::rest()
{
    cout << m_Name << " is resting..." << endl;
    m_ActualMentalSharpness = m_InitialMentalSharpness;
}

bool Stoutonian::runAway()
{
    // generates 0, 1, 2, or 3; 0 is the bottom 25% so returning > 0 to provide 75% runAway success
    return rand() % 4 > 0;
}

void Stoutonian::challenge(Stoutonian& opponent)
{

}

bool Stoutonian::recruit(Stoutonian& opponent)
{
    return true;
}
