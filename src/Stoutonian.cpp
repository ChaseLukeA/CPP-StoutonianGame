// ---------------------------------------------------------------------------
//
//                   University of Wisconsin-Stout
//            Mathematics, Statistics & Computer Science
//                 CS-244 Data Structures - Fall 2016
//
// This software is student work for CSS-244 Data Structures and may not
// be copied except by the original author and instructor.
// Copyright 2016
//
// Stoutonian.cpp
//
// The Stoutonian class for creating a Stoutonian object; names are randomly-
// generated by the Names.h class
//
// Instructor: Jocelyn Richardt
// Assignment: StoutonianGame
// Author: Luke A Chase
// Date: 03/01/2017
//
// ---------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "Stoutonian.h"
#include "Names.h"

// default constructor creates a Stoutonian with a randomly-generated type, name, and stats
Stoutonian::Stoutonian()
{
    spawn(randomType());
}

// default constructor creates a Stoutonian with the specified StoutonianType and a randomly-generated name and stats
Stoutonian::Stoutonian(StoutonianType type)
{
    spawn(type);
}

// full constructor creates a Stoutonian with the provided type, name, and stats
Stoutonian::Stoutonian(StoutonianType type, string name, int sharpness, int strength, int speed)
: m_Type(type), m_Name(name), m_InitialMentalSharpness(sharpness), m_ChallengeStrength(strength), m_Speed(speed)
{
    m_ActualMentalSharpness = m_InitialMentalSharpness;
}


Stoutonian::~Stoutonian()
{
    //dtor
}

void Stoutonian::setType(int type)
{
    switch (type)
    {
    case 0:
        m_Type = GameDesigner;
        break;
    case 1:
        m_Type = MathGenius;
        break;
    case 2:
        m_Type = InfoTechGuru;
        break;
    default:
        m_Type = Unknown;
    }
}

StoutonianType Stoutonian::randomType()
{
    return static_cast<StoutonianType>(rand() % 3);
}

// creates a Stoutonian from the specified type; name and speed are randomly generated
void Stoutonian::spawn(StoutonianType type)
{
    Names *names = Names::getInstance();

    m_Type = type;
    m_Name = names->randomName();

    switch (type)
    {
    case GameDesigner:
        m_InitialMentalSharpness = 30;
        m_ChallengeStrength = 20;
        m_Speed = random(10, 20);
        break;
    case MathGenius:
        m_InitialMentalSharpness = 40;
        m_ChallengeStrength = 15;
        m_Speed = random(10, 20);
        break;
    case InfoTechGuru:
        m_InitialMentalSharpness = 30;
        m_ChallengeStrength = 15;
        m_Speed = random(15, 25);
        break;
    default: // in case we want the "Unknown" Stoutonian type
        m_InitialMentalSharpness = random(2, 4) * 10; // between 20 and 40
        m_ChallengeStrength = random(2, 5) * 5; // between 10 and 25
        m_Speed = random(10, 25);
    }

    m_ActualMentalSharpness = m_InitialMentalSharpness;
}

int Stoutonian::random(int low, int high)
{
    return rand() % high + low;
}

void Stoutonian::speak()
{
    switch (m_Type)
    {
    case GameDesigner:
        cout << m_Name << " here, the best Game Designer in the universe! " << randomAction() << endl << "I'm the smartest Stoutonian with my Mental Sharpnesss of " << m_InitialMentalSharpness << " and I can deal " << m_ChallengeStrength << " hit points with ease.";
        break;
    case MathGenius:
        cout << "Cower before the great Math Genius " << m_Name << "! " << randomAction() << endl << "I'm the sharpest of the Stoutonians with an MS of " << m_InitialMentalSharpness << " and a maximum " << m_ChallengeStrength << " hit point capability.";
        break;
    case InfoTechGuru:
        cout << "I am " << m_Name << ", the IT Guru. No Stoutonian is better than me. " << randomAction() << endl << "My " << m_InitialMentalSharpness << " Mental Sharpness gives me " << m_ChallengeStrength << " hit points.";
        break;
    default:
        cout << "This is " << m_Name << ", nerd extraordinaire. " << randomAction() << endl << "I have " << m_InitialMentalSharpness << " units of Mental Sharpness and " << m_ChallengeStrength << " maximum hit points I can deal.";
        break;
    }
}

string Stoutonian::randomAction()
{
    int action = random(1, 15);
    switch (action)
    {
    case 1:
        return "*pushes glasses up nose*";
    case 2:
        return "*lurks out from the shadows*";
    case 3:
        return "*pats pocket proctor in shirt*";
    case 4:
        return "*squints menacingly*";
    case 5:
        return "*avoiding eye contact*";
    case 6:
        return "*combing hair over*";
    case 7:
        return "*loudly clears throat*";
    case 8:
        return "*quickly flips through pocketbook*";
    case 9:
        return "*annoyingly cackles*";
    case 10:
        return "*shiftily adjusts suspenders*";
    case 11:
        return "*raising voice*";
    case 12:
        return "*leaning to look past you*";
    case 13:
        return "*giving Vulcan salute*";
    case 14:
        return "*pulling earbud out of left ear*";
    case 15:
        return "*roundhouse kicking the air*";
    default:
        return "*raising eyebrow*";
    }

}

void Stoutonian::rest()
{
    cout << m_Name << " is resting..." << endl;
    m_ActualMentalSharpness = m_InitialMentalSharpness;
}

bool Stoutonian::runAway()
{
    // generates 0, 1, 2, or 3; 0 is the bottom 25% so returning > 0 to provide 75% runAway success
    return rand() % 4 > 0;
}

void Stoutonian::challenge(Stoutonian& opponent)
{

}

bool Stoutonian::recruit(Stoutonian& opponent)
{
    return true;
}
